{"version":3,"sources":["../src/components/AutodeskViewer/AutodeskViewer.tsx","../src/heplers/viewerHelpers.ts","../src/index.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, FC, useState } from 'react';\nimport { getGlobalOffset } from '../../heplers/viewerHelpers';\nimport ViewerEventArgs = Autodesk.Viewing.ViewerEventArgs;\n\ntype Props = {\n  /**\n   * The URN of the model to load in Autodesk Viewer.\n   * Example: `dXJuOmFkc2subW9kZWw6...` or [`dXJuOmFkc2subW9kZWw6...`, `dXJuOmFkc2subW9kZWw6...`, etc.]\n   */\n  urn: string | string[];\n  /**\n   * The access token to use for authentication. Should be retrieved from your server.\n   */\n  accessToken: string;\n  /**\n   * The ID of the viewable to load. If you don't provide this, the default viewable will be loaded'\n   * View priority: selectedView > Default View > New Construction > Default Geometry (means Viewer method)\n   */\n  viewableId?: string;\n  /**\n   * Whether to use a shared coordinate system for the model.\n   * Default: false\n   */\n  useSharedCoordinateSystem?: boolean;\n  /**\n   * Callback function to handle the mapping of GUIDs to DBIDs.\n   * @param modelMapping - An object containing the model and its GUID-to-DBID mapping.\n   */\n  mappingCallback?: (arg: any) => void;\n  /**\n   * Callback function to clear any cached data or state.\n   * Here I mean to clear all data that a user gets from any callback from viewer.\n   */\n  clearCallback?: () => void;\n  /**\n   * The environment to use for Autodesk Viewer.\n   * Default: 'AutodeskProduction2'\n   */\n  viewerEnv?: 'AutodeskProduction' | 'AutodeskProduction2';\n  /**\n   * The API to use for Autodesk Viewer.\n   * Default: 'derivativeV2'\n   */\n  viewerApi?: 'streamingV2' | 'derivativeV2';\n  /**\n   * The theme to use for Autodesk Viewer.\n   * Default: 'light-theme'\n   */\n  theme?: 'light-theme' | 'dark-theme';\n  /**\n   * The version of Autodesk Viewer to use.\n   * Default: '7.111.0'\n   * The latest updates could be checked here: https://aps.autodesk.com/en/docs/viewer/v7/change_history/changelog_v7/\n   */\n  version?: string;\n};\n\nexport const AutodeskViewer: FC<Props> = ({\n  urn,\n  accessToken,\n  viewableId,\n  useSharedCoordinateSystem,\n  mappingCallback,\n  clearCallback,\n  viewerEnv = 'AutodeskProduction2',\n  viewerApi = 'derivativeV2',\n  theme = 'light-theme',\n  version = '7.111.0',\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const viewerRef = useRef<any>(null);\n\n  const [modelAdded, setModelAdded] = useState<string>('');\n  const [modelLoaded, setModelLoaded] = useState(false);\n\n  if (typeof window === 'undefined') return null;\n\n  const getAllLeafComponents = (viewer: Autodesk.Viewing.Viewer3D, callback: (arg: number[]) => void) => {\n    let cbCount = 0; // count pending callbacks\n    const components: number[] = []; // store the results\n    let tree = viewer.model.getData().instanceTree as Autodesk.Viewing.InstanceTree; // the instance tree\n\n    function getLeafComponentsRec(parent: number) {\n      cbCount++;\n      if (tree.getChildCount(parent) != 0) {\n        tree.enumNodeChildren(\n          parent,\n          function (children) {\n            getLeafComponentsRec(children);\n          },\n          false,\n        );\n      } else {\n        components.push(parent);\n      }\n      if (--cbCount == 0) callback(components);\n    }\n    viewer.getObjectTree(function (objectTree) {\n      tree = objectTree;\n      getLeafComponentsRec(tree.getRootId());\n    });\n  };\n\n  const onGeometryLoaded = useCallback((e: ViewerEventArgs) => {\n    setModelLoaded(true);\n    // console.log('Geometry loaded', e);\n  }, []);\n\n  const onModelAdded = useCallback((e: ViewerEventArgs) => {\n    //@ts-ignore\n    setModelAdded(`${e.type}-${e.model.id}`);\n    // console.log('Model added', e);\n  }, []);\n\n  const onInstTreeCreated = useCallback(async (e: ViewerEventArgs) => {\n    getAllLeafComponents(e.target, function (dbIds: number[]) {\n      console.log('Found ' + dbIds.length + ' leaf nodes');\n\n      e.target.model.getBulkProperties2(\n        dbIds,\n        { propFilter: ['externalId'], categoryFilter: undefined, ignoreHidden: true, needExternalId: true },\n        arg => {\n          const dict: { [key: string]: number } = {};\n          arg.forEach(el => {\n            if (el.externalId) {\n              dict[el.externalId] = el.dbId;\n            }\n          });\n          console.log('Found leaf dbids processed');\n          const modelMapping = { model: e.model, guidsToDbids: dict };\n          //in mapping callback needs to handle save previous state due to model load queue\n          mappingCallback && mappingCallback(modelMapping);\n        },\n        err => {\n          console.log('Mapping GUID to DBID error', err);\n        },\n      );\n    });\n  }, []);\n\n  useEffect(() => {\n    if (!viewerRef.current) {\n      async function loadViewer() {\n        await loadForgeViewer(version);\n\n        const options = {\n          env: viewerEnv,\n          api: viewerApi,\n          accessToken,\n        };\n\n        const viewerOptions = {\n          extensions: ['Autodesk.DocumentBrowser'],\n          theme: theme,\n        };\n\n        Autodesk.Viewing.Initializer(options, () => {\n          window?.NOP_VIEWER?.finish();\n          window?.NOP_VIEWER?.tearDown();\n\n          viewerRef.current = new Autodesk.Viewing.GuiViewer3D(containerRef.current, viewerOptions);\n          viewerRef.current.start();\n\n          const urns = Array.isArray(urn) ? urn : [urn]; // support single or multiple\n\n          const loadModelFromUrn = async (urn: string, isFirst: boolean) => {\n            const documentId = `urn:${urn}`;\n            Autodesk.Viewing.Document.load(\n              documentId,\n              async (doc: any) => {\n                const root = doc.getRoot();\n                const selectedView = root.findByGuid(viewableId);\n                const defaultView = root.getNamedViews().find((v: any) => v.data.name === 'Default View');\n                const newConstructionView = root.getNamedViews().find((v: any) => v.data.name === 'New Construction');\n                const defaultModel = root.getDefaultGeometry();\n\n                // Pick priority: selectedView > Default View > New Construction > Default Geometry\n                const viewable = selectedView || defaultView || newConstructionView || defaultModel;\n\n                const globalOffset = await getGlobalOffset({ doc: doc, viewerInst: viewerRef.current, node: viewable });\n\n                await viewerRef.current.loadDocumentNode(doc, viewable, {\n                  applyRefPoint: useSharedCoordinateSystem,\n                  keepCurrentModels: !isFirst,\n                  globalOffset: useSharedCoordinateSystem ? globalOffset : { x: 0, y: 0, z: 0 },\n                });\n              },\n              (errCode: any, msg: any) => {\n                console.error(`Failed to load document ${urn}`, errCode, msg);\n              },\n            );\n          };\n\n          // Load all models in sequence\n          urns.forEach((u, idx) => loadModelFromUrn(u, idx === 0));\n\n          // Events\n          viewerRef.current.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, onGeometryLoaded);\n          viewerRef.current.addEventListener(Autodesk.Viewing.MODEL_ADDED_EVENT, onModelAdded);\n          viewerRef.current.addEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, onInstTreeCreated);\n        });\n      }\n      //@ts-ignore\n      loadViewer().then(() => console.log('VIEWER LOADED', viewerRef.current, window?.NOP_VIEWERS));\n    }\n    return () => {\n      viewerRef.current?.tearDown();\n      viewerRef.current?.finish();\n\n      //clear all event listeners\n      viewerRef.current?.removeEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, onGeometryLoaded);\n      viewerRef.current?.removeEventListener(Autodesk.Viewing.MODEL_ADDED_EVENT, onModelAdded);\n      viewerRef.current?.removeEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, onInstTreeCreated);\n\n      viewerRef.current = null;\n      //clear all data\n      clearCallback && clearCallback();\n    };\n  }, [urn, accessToken, onGeometryLoaded, onModelAdded, onInstTreeCreated, clearCallback]);\n\n  useEffect(() => {\n    if (!modelLoaded) return;\n    if (!containerRef.current) return;\n\n    const resizeObserver = new ResizeObserver(entries => {\n      for (const _entry of entries) {\n        window?.NOP_VIEWER && window.NOP_VIEWER.resize();\n      }\n    });\n\n    resizeObserver.observe(containerRef.current);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [modelLoaded, modelAdded]);\n\n  return <div ref={containerRef} style={{ width: '100%', height: '100%' }} />;\n};\n\n// Load viewer from local files\nasync function loadForgeViewer(version: string) {\n  // If already loaded, just return\n  if ((window as any).Autodesk?.Viewing) return;\n\n  if (document.getElementById('forge-viewer-script')) {\n    // script already injected but maybe not finished loading\n    await new Promise(resolve => {\n      (document.getElementById('forge-viewer-script') as HTMLScriptElement).onload = resolve;\n    });\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.id = 'forge-viewer-script';\n  script.src = `https://developer.api.autodesk.com/modelderivative/v2/viewers/${version}/viewer3D.min.js`;\n  document.head.appendChild(script);\n\n  const link = document.createElement('link');\n  link.href = `https://developer.api.autodesk.com/modelderivative/v2/viewers/${version}/style.min.css`;\n  link.rel = 'stylesheet';\n  document.head.appendChild(link);\n\n  await new Promise(resolve => {\n    script.onload = resolve;\n  });\n}\n","//get global offset fot shared coordinate\nimport { IGetProps, IGlobalOffest, ILoadModel, ISelection, IUnloadModel } from './viewerHelper.types';\n\nexport const getGlobalOffset = async (props: IGlobalOffest) => {\n  const bubbleNode = props.node ? props.node : props.doc.getRoot().getDefaultGeometry();\n  await props.doc.downloadAecModelData();\n  const aecModelData = bubbleNode.getAecModelData();\n  const tf = aecModelData && aecModelData.refPointTransformation;\n\n  let globalOffset = props.viewerInst.model?.getData().globalOffset;\n  const refPoint = tf ? new THREE.Vector3(tf[9], tf[10], tf[11]) : new THREE.Vector3(0, 0, 0);\n\n  // Check if the current globalOffset is close enough to the refPoint to avoid inaccuracies.\n  const MaxDistSqr = 4.0e6;\n  const distSqr = globalOffset && THREE.Vector3.prototype.distanceToSquared.call(refPoint, globalOffset);\n  if (!globalOffset || distSqr > MaxDistSqr) {\n    globalOffset = new THREE.Vector3().copy(refPoint);\n  }\n  return globalOffset;\n};\n\nexport const getAggregateSelection = (props: ISelection) => {\n  const aggregatedDbIds: { model: any; ids: number[] }[] = [];\n\n  const allFragIds = [];\n\n  props.guidsAndModels.forEach(({ model, guidsToDbids }) => {\n    const dbIds = props.guids.map(guid => guidsToDbids[guid]).filter((el: number) => el);\n    if (!dbIds.length) return;\n    aggregatedDbIds.push({ model: model, ids: dbIds });\n\n    dbIds?.forEach((id: number) => {\n      model.getInstanceTree().enumNodeFragments(id, (fragId: number) => {\n        allFragIds.push(fragId);\n      });\n    });\n  });\n\n  if (!allFragIds.length) {\n    return;\n  }\n\n  //@ts-ignore\n  props.viewer.setAggregateSelection();\n  //@ts-ignore\n  props.isolate && props.viewer.setAggregateIsolation();\n  props.viewer.setAggregateSelection(aggregatedDbIds);\n  //@ts-ignore\n  props.isolate && viewer.setAggregateIsolation(aggregatedDbIds);\n  props.zoom &&\n    props.viewer.fitToView(\n      //@ts-ignore\n      aggregatedDbIds.map(el => {\n        return { model: el.model, selection: el.ids };\n      }),\n    );\n};\n\nexport const loadModelByUrn = (props: ILoadModel) => {\n  Autodesk.Viewing.Document.load(\n    'urn:' + props.urn,\n    async doc => {\n      const root = doc.getRoot();\n      const selectedView = root.findByGuid(props.loadModelViewableId || '');\n      const defaultView = root.getNamedViews().find((v: any) => v.data.name === 'Default View');\n      const newConstructionView = root.getNamedViews().find((v: any) => v.data.name === 'New Construction');\n      const defaultModel = root.getDefaultGeometry();\n\n      // Pick priority: selectedView > Default View > New Construction > Default Geometry\n      const viewable = selectedView || defaultView || newConstructionView || defaultModel;\n\n      const globalOffset = await getGlobalOffset({ doc: doc, viewerInst: props.viewer, node: viewable });\n\n      await props.viewer.loadDocumentNode(doc, viewable, {\n        preserveView: props.preserveView,\n        applyRefPoint: !!props.useSharedCoordinateSystem,\n        keepCurrentModels: !!props.keepCurrentModels,\n        globalOffset: !!props.useSharedCoordinateSystem ? globalOffset : { x: 0, y: 0, z: 0 },\n      });\n    },\n    (code, message, errors) => console.error('LOAD MODEL ERROR', code, message, errors),\n  );\n};\n\nexport const unloadModelByUrn = (props: IUnloadModel) => {\n  const allLoadedModels = props.viewer.getAllModels();\n  const modelToUnload = allLoadedModels.find(model => model.getData().urn === props.urn);\n  props.viewer.unloadModel(modelToUnload);\n  props.callbackToUpdatedMapping && props.callbackToUpdatedMapping(props.urn);\n};\n\nexport const getObjectPropsByGuid = async (props: IGetProps) => {\n  const mappingData = props.guidsAndModels.map(el => {\n    const { model, guidsToDbids } = el;\n    const dbIds = props.guids.map(guid => guidsToDbids[guid]);\n    return new Promise((resolve, reject) => {\n      model.getBulkProperties2(\n        dbIds,\n        {\n          propFilter: props.propFilter,\n          categoryFilter: props.categoryFilter,\n          ignoreHidden: props.ignoreHidden,\n          needExternalId: props.needExternalId,\n        },\n        (properties: any) => {\n          console.log('Found leaf dbids processed');\n          resolve(properties);\n        },\n        (err: any) => {\n          console.log('Mapping GUID to DBID error', err);\n          reject(err);\n        },\n      );\n    });\n  });\n  const result = (await Promise.all(mappingData)) as any;\n  return result.flat();\n};\n","import { AutodeskViewer } from './components';\nimport { getAggregateSelection, loadModelByUrn, unloadModelByUrn, getObjectPropsByGuid } from './heplers';\n\nexport { AutodeskViewer, getAggregateSelection, loadModelByUrn, unloadModelByUrn, getObjectPropsByGuid };\n\nexport default {\n  AutodeskViewer,\n  getAggregateSelection,\n  loadModelByUrn,\n  unloadModelByUrn,\n  getObjectPropsByGuid,\n};\n"],"mappings":"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","names":["viewer","urn"]}